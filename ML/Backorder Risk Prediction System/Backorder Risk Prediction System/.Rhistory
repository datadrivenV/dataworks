install.packages("caret")
library(caret)
logistic_model = glm(went_on_backorder ~ ., family = binomial(), train)
require(caret)
logistic_model = glm(went_on_backorder ~ ., family = binomial(), train)
logistic_model = glm(went_on_backorder ~ ., train, family = binomial())
View(logistic_model)
rm(logistic_model)
library(randomForest)
fit = randomForest(as.factor(went_on_backorder)~., data = train)
library(tidymodels)
library(visdat)
library(tidyr)
library(car)
library(pROC)
library(ggplot2)
library(vip)
library(rpart.plot)
library(DALEXtra)
library(dgof)
library(dplyr)
library(magrittr)
prod_train=read.csv("F:\\Vanshika\\DATA\\Rdata\\PROJECTS\\MANUFACTURING\\product_train.csv",stringsAsFactors = FALSE)
prod_test=read.csv("F:\\Vanshika\\DATA\\Rdata\\PROJECTS\\MANUFACTURING\\product_test.csv",stringsAsFactors = FALSE)
prod_test$went_on_backorder=NA
View(prod_train)
View(prod_test)
prod_train$data='train'
prod_test$data='test'
prod_all=rbind(prod_train,prod_test)
apply(prod_all,2,function(x) length(unique(x)))
prod_all=prod_all %>% select(-sku)
glimpse(prod_all)
CreateDummies=function(data,var,freq_cutoff=100){
t=table(data[,var])
t=t[t>freq_cutoff]
t=sort(t)
categories=names(t)[-1]
for( cat in categories){
name=paste(var,cat,sep="_")
name=gsub(" ","",name)
name=gsub("-","_",name)
name=gsub("\\?","Q",name)
name=gsub("<","LT_",name)
name=gsub("\\+","",name)
name=gsub(">","GT_",name)
name=gsub("=","EQ_",name)
name=gsub(",","",name)
name=gsub("/","_",name)
data[,name]=as.numeric(data[,var]==cat)
}
data[,var]=NULL
return(data)
}
glimpse(prod_train)
rm(CreateDummies)
glimpse(prod_all)
glimpse(prod_all)
char_to_num = function(x){
x=ifelse(x=='Yes',1,0)
return(x)
}
for(i in colnames(prod_all)){
if(class(i)=="character")
{
if(i!=('data'| 'went_on_backorder')){
i=char_to_num(i)
}
}
}
for(i in colnames(prod_all)){
if(class(i)=="character")
{
if(i!='data'){
if(i!='went_on_backorder'){
i=char_to_num(i)
}
}
}
}
View(prod_all)
prod_train=read.csv("F:\\Vanshika\\DATA\\Rdata\\PROJECTS\\MANUFACTURING\\product_train.csv",stringsAsFactors = FALSE)
prod_test=read.csv("F:\\Vanshika\\DATA\\Rdata\\PROJECTS\\MANUFACTURING\\product_test.csv",stringsAsFactors = FALSE)
prod_train=read.csv("F:\\Vanshika\\DATA\\Rdata\\PROJECTS\\MANUFACTURING\\product_train.csv",stringsAsFactors = TRUE)
prod_test=read.csv("F:\\Vanshika\\DATA\\Rdata\\PROJECTS\\MANUFACTURING\\product_test.csv",stringsAsFactors = TRUE)
View(prod_train)
prod_all=
glimpse(prod_train)
prod_train=read.csv("F:\\Vanshika\\DATA\\Rdata\\PROJECTS\\MANUFACTURING\\product_train.csv",stringsAsFactors = FALSE)
prod_test=read.csv("F:\\Vanshika\\DATA\\Rdata\\PROJECTS\\MANUFACTURING\\product_test.csv",stringsAsFactors = FALSE)
prod_test$went_on_backorder=NA
prod_train$data='train'
prod_test$data='test'
prod_all=rbind(prod_train,prod_test)
prod_all=prod_all %>% select(-sku)
glimpse(prod_all)
for(col in names(prod_all)){
if((class(col)=='character') & !(col %in% c("data", "went_on_backorder"))){
prod_all[col]=ifelse(prod_all[col]=="Yes",1,0)
}
}
View(prod_all)
View(prod_all)
View(prod_all)
glimpse(prod_train)
head(prod_all)
###we can go ahead and separate training and test data BUT first we check NA values
prod_all=prod_all[!((is.na(prod_all$went_on_backorder)) & prod_all$data=='train'), ]
for(col in names(prod_all)){
if(sum(is.na(prod_all[,col]))>0 & !(col %in% c("data","went_on_backorder"))){
prod_all[is.na(prod_all[,col]),col]=mean(prod_all[prod_all$data=='train',col],na.rm=T)
}
}
prod_train = prod_all %>% filter(data == 'train') %>% select(-data)
prod_test= prod_all %>% filter(data == 'test') %>% select(-data-went_on_backorder)
prod_test= prod_all %>% filter(data == 'test') %>% select(-data -went_on_backorder)
View(prod_all)
View(prod_train)
glimpse(prod_train)
glimpse(prod_test)
glimpse(prod_all)
library(tidymodels)
library(visdat)
library(tidyr)
library(car)
library(pROC)
library(ggplot2)
library(vip)
library(rpart.plot)
library(DALEXtra)
library(dgof)
library(dplyr)
library(magrittr)
prod_train=read.csv("F:\\Vanshika\\DATA\\Rdata\\PROJECTS\\MANUFACTURING\\product_train.csv",stringsAsFactors = FALSE)
prod_test=read.csv("F:\\Vanshika\\DATA\\Rdata\\PROJECTS\\MANUFACTURING\\product_test.csv",stringsAsFactors = FALSE)
prod_test$went_on_backorder=NA
prod_train$data='train'
prod_test$data='test'
prod_all=rbind(prod_train,prod_test)
View(prod_train)
View(prod_test)
View(prod_all)
apply(prod_all,2,function(x) length(unique(x)))
prod_all=prod_all %>% select(-sku)
glimpse(prod_all)
for(col in names(prod_all)){
if((class(col)=='character') & !(col %in% c("data", "went_on_backorder"))){
prod_all[col]=ifelse(prod_all[col]=="Yes",1,0)
}
}
glimpse(prod_train)
glimpse(prod_train)
glimpse(prod_all)
table(prod_all$data)
table(prod_all$went_on_backorder)
head(prod_all)
###we can go ahead and separate training and test data BUT first we check NA values
prod_all=prod_all[!((is.na(prod_all$went_on_backorder)) & prod_all$data=='train'), ]
for(col in names(prod_all)){
if(sum(is.na(prod_all[,col]))>0 & !(col %in% c("data","went_on_backorder"))){
prod_all[is.na(prod_all[,col]),col]=mean(prod_all[prod_all$data=='train',col],na.rm=T)
}
}
prod_train=read.csv("F:\\Vanshika\\DATA\\Rdata\\PROJECTS\\MANUFACTURING\\product_train.csv",stringsAsFactors = FALSE)
prod_test=read.csv("F:\\Vanshika\\DATA\\Rdata\\PROJECTS\\MANUFACTURING\\product_test.csv",stringsAsFactors = FALSE)
prod_test$went_on_backorder=NA
prod_train$data='train'
prod_test$data='test'
prod_all=rbind(prod_train,prod_test)
apply(prod_all,2,function(x) length(unique(x)))
prod_all=prod_all %>% select(-sku)
glimpse(prod_all)
for(col in names(prod_all)){
if((class(col)=='character') & !(col %in% c("data", "went_on_backorder"))){
prod_all[col]=ifelse(prod_all[col]=="Yes",1,0)
}
}
glimpse(prod_train)
head(prod_all)
prod_train = prod_all %>% filter(data == 'train') %>% select(-data)
prod_test= prod_all %>% filter(data == 'test') %>% select(-data -went_on_backorder)
prod_train=read.csv("F:\\Vanshika\\DATA\\Rdata\\PROJECTS\\MANUFACTURING\\product_train.csv",stringsAsFactors = FALSE)
prod_test=read.csv("F:\\Vanshika\\DATA\\Rdata\\PROJECTS\\MANUFACTURING\\product_test.csv",stringsAsFactors = FALSE)
View(prod_test)
View(prod_train)
prod_test$went_on_backorder=NA
prod_train$data='train'
prod_test$data='test'
prod_all=rbind(prod_train,prod_test)
View(prod_all)
prod_all=prod_all %>% select(-sku)
for(col in names(prod_all)){
if((class(col)=='character') & !(col %in% c("data", "went_on_backorder"))){
prod_all[col]=ifelse(prod_all[col]=="Yes",1,0)
}
}
View(prod_all)
rm(prod_all)
prod_all=rbind(prod_train,prod_test)
prod_all=prod_all %>% select(-sku)
glimpse(prod_all)
for(col in names(prod_all)){
if((class(col)=='character') & !(col %in% c("data", "went_on_backorder"))){
col=ifelse(col=="Yes",1,0)
}
}
glimpse(prod_all)
rm(col)
for(col in names(prod_all)){
if((class(prod_all[,col])=="character") & !(prod_all[,col] %in% c("data", "went_on_backorder"))){
prod_all[,col]=ifelse(prod_all[,col]=="Yes",1,0)
}
}
for(col in names(prod_all)){
print(class(col))
}
for(col in names(prod_all)){
print(class(prod_all[col]))
}
for(col in names(prod_all)){
print(class(prod_all[,col]))
}
glimpse(prod_all)
for(col in names(prod_all)){
if(class(prod_all[,col])=="character"){
if(!(prod_all[,col] %in% c("data", "went_on_backorder"))){
prod_all[,col]=ifelse(prod_all[,col]=="Yes",1,0)
}
}
}
glimpse(prod_all)
for(col in names(prod_all)){
if(!(prod_all[,col] %in% c("data", "went_on_backorder"))){
prod_all[,col]=ifelse(prod_all[,col]=="Yes",1,0)
}
}
rm(prod_all)
prod_all=rbind(prod_train,prod_test)
#if(class(prod_all[,col])=="character")
prod_all=prod_all %>% select(-sku)
glimpse(prod_all)
for(i in colnames(prod_all)){
if(!(prod_all[,i] %in% c("data", "went_on_backorder"))){
prod_all[,i]=ifelse(prod_all[,i]=="Yes",1,0)
}
}
for(i in colnames(prod_all)){
if(prod_all[,i]!='data' & prod_all[,i]!='went_to_backorder'){
prod_all[,i]=ifelse(prod_all[,i]=="Yes",1,0)
}
}
for(i in colnames(prod_all)){
if(prod_all[,i]!='data'){
if(prod_all[,i]!='went_to_backorder'){
prod_all[,i]=ifelse(prod_all[,i]=="Yes",1,0)
}
}
}
rm(col)
rm(i)
prod_train=read.csv("F:\\Vanshika\\DATA\\Rdata\\PROJECTS\\MANUFACTURING\\product_train.csv",stringsAsFactors = FALSE)
prod_test=read.csv("F:\\Vanshika\\DATA\\Rdata\\PROJECTS\\MANUFACTURING\\product_test.csv",stringsAsFactors = FALSE)
View(prod_train)
View(prod_test)
glimpse(prod_train)
prod_train=prod_train %>% select(-sku)
prod_test=prod_test %>% select(-sku)
char_to_num = function(x){
x=ifelse(x=='Yes',1,0)
return(x)
}
yes_to_no=function(X){
for(col in colnames(X)){
if(class(X[,col])=="character"){
char_to_num(X)
}
}
return(X)
}
yes_to_no(prod_train)
prod_train=yes_to_no(prod_train)
rm(yes_to_no)
char_to_num(prod_train$potential_issue)
for(X in colnames(prod_train)){
if(class(X)=="character"){
prod_train$X=char_to_num(prod_train$X)
}
}
for(X in colnames(prod_train)){
if(class(X)=="character"){
prod_train$'X'=char_to_num(prod_train$'X')
}
}
for(X in colnames(prod_train)){
if(class(X)=="character"){
prod_train[,X]=char_to_num(prod_train[,X])
}
}
for(X in colnames(prod_test)){
if(class(X)=="character"){
prod_test[,X]=char_to_num(prod_test[,X])
}
}
glimpse(prod_train)
glimpse(prod_test)
any(is.na(prod_train))
any(is.na(prod_test))
#Using Random forest model to predict
library(randomForest)
fit = randomForest(as.factor(went_on_backorder)~., data = prod_train)
### Make predictions on test and submit
test.predictions = predict(fit, newdata = prod_test)
write.csv(test.predictions,file = "Manuf_pred.csv", row.names = F)
write.csv(test.predictions,file = "F:\\Vanshika\\DATA\\Rdata\\PROJECTS\\MANUFACTURING\\Mnf_pred.csv", row.names = F)
setwd("F:\\Vanshika\\DATA\\Rdata\\PROJECTS\\MANUFACTURING")
library(dplyr)
library(car)
p_train=read.csv("product_train.csv")
p_test=read.csv("product_test.csv")
p_test$went_on_backorder=NA
p_train$data="train"
p_test$data="test"
p_all=rbind(p_train,p_test)
glimpse(p_all)
p_all=p_all %>%
select(-ppap_risk,-oe_constraint,-deck_risk,-stop_auto_buy,-rev_stop)
CreateDummies=function(data,var,freq_cutoff=100){
t=table(data[,var])
t=t[t>freq_cutoff]
t=sort(t)
categories=names(t)[-1]
for( cat in categories){
name=paste(var,cat,sep="_")
name=gsub(" ","",name)
name=gsub("-","_",name)
name=gsub("\\?","Q",name)
name=gsub("<","LT_",name)
name=gsub("\\+","",name)
name=gsub(">","GT_",name)
name=gsub("=","EQ_",name)
name=gsub(",","",name)
name=gsub("/","_",name)
data[,name]=as.numeric(data[,var]==cat)
}
data[,var]=NULL
return(data)
}
char_logical=sapply(p_all,is.character)
cat_cols=names(p_all)[char_logical]
cat_cols
cat_cols=cat_cols[!(cat_cols %in% c('data','went_on_backorder'))]
cat_cols
for(col in cat_cols){
p_all=CreateDummies(p_all,col,50)
}
glimpse(p_all)
p_all=p_all[!(is.na(p_all$went_on_backorder) & p_all$data=="train"),]
for(col in names(p_all)){
if(sum(is.na(p_all[,col]))>0 & !(col %in% c("data","went_on_backorder"))){
p_all[is.na(p_all[,col]),col]=mean(p_all[p_all$data=='train',col],na.rm=T)
}
}
p_all$went_on_backorder=ifelse(p_all$went_on_backorder=="No",0,1)
p_all$went_on_backorder=as.numeric(p_all$went_on_backorder)
p_train=p_all %>%
filter(data=="train") %>%
select(-data)
p_test=p_all %>%
filter(data=="test") %>%
select(-data)
glimpse(p_train)
fit=lm(went_on_backorder~.,data=p_train)
sort(vif(fit),decreasing=T)[1:3]
fit=lm(went_on_backorder~. -forecast_6_month,data=p_train)
sort(vif(fit),decreasing=T)[1:3]
fit=lm(went_on_backorder~. -forecast_6_month -sales_6_month,data=p_train)
sort(vif(fit),decreasing=T)[1:3]
fit=lm(went_on_backorder~. -forecast_6_month -sales_6_month -sales_9_month,
data=p_train)
sort(vif(fit),decreasing=T)[1:3]
fit=lm(went_on_backorder~. -forecast_6_month
-sales_6_month -sales_9_month -forecast_9_month,data=p_train)
sort(vif(fit),decreasing=T)[1:3]
fit=lm(went_on_backorder~. -forecast_6_month
-sales_6_month -sales_9_month -forecast_9_month -sales_1_month,data=p_train)
sort(vif(fit),decreasing=T)[1:3]
formula(fit)
p_train=p_train %>%
select(-forecast_6_month,
-sales_6_month, -sales_9_month, -forecast_9_month, -sales_1_month)
library(randomForest)
fit=randomForest(as.factor(went_on_backorder)~.,data=p_train,classwt=c(0.99,0.01),do.trace=T)
fit
ks.test(response,"pnorm")
response=predict(fit,newdata = p_test,type= "response")
ks.test(response,"pnorm")
ks.test(as.numeric(response),"pnorm")
real=p_train$went_on_backorder
test_pred=predict(fit,newdata = p_test,type= "response")
rm(response)
test_pred=predict(fit,newdata = p_test,type= "prob")
View(test_pred)
test_pred=predict(fit,newdata = p_test,type= "response")
train_pred=predict(fit,newdata = p_train,type= "response")
train.score=as.numeric(train_pred)
rocit = ROCit::rocit(score = train.score,
class = real)
kplot=ROCit::ksplot(rocit)
my_cutoff=kplot$`KS Cutoff`
test_hard_class=as.numeric(test_pred>my_cutoff)
## test hard classes
test_pred=as.numeric(test_pred)
test_hard_class=as.numeric(test_pred>my_cutoff)
test_preds=data.frame(test_hard_class)
View(test_preds)
names(test_preds)="went_on_backorder"
test_preds$went_on_backorder=ifelse(went_on_backorder=1,"Yes","No")
test_preds$went_on_backorder=ifelse(went_on_backorder==1,"Yes","No")
test_preds$went_on_backorder=ifelse(test_preds$went_on_backorder=1,"Yes","No")
test_preds$went_on_backorder=ifelse(test_preds$went_on_backorder==1,"Yes","No")
View(test_preds)
table(test_preds)
rm(test_preds)
test_preds=data.frame(test_hard_class)
View(test_preds)
table(test_preds)
table(test_hard_class)
rm(test_preds)
rm(rocit)
rm(kplot)
rm(test_hard_class)
rm(train.score)
rm(real)
rm(my_cutoff)
ks.test(as.numeric(test_pred),"pnorm")
names(test_pred)="went_on_backorder"
train_pred=predict(fit,newdata = p_train,type= "response")
test_pred=predict(fit,newdata = p_test,type= "response")
test_pred=as.numeric(test_pred)
ks.test(test_pred,"pnorm")
names(test_pred)="went_on_backorder"
test_pred=data.frame(test_pred)
View(test_pred)
names(test_pred)="went_on_backorder"
test_pred=predict(fit,newdata = p_test,type= "response")
test_pred=data.frame(test_pred)
View(test_pred)
class(test_pred)
ks.test(test_pred,"pnorm")
test_pred=as.numeric(test_pred)
test_pred=predict(fit,newdata = p_test,type= "response")
test_pred=as.numeric(test_pred)
test_pred=data.frame(test_pred)
test_pred=predict(fit,newdata = p_test,type= "response")
test_pred=as.numeric(test_pred)
test_pred=predict(fit,newdata = p_test,type= "response")
train_pred=predict(fit,new_data = p_train,type="prob")
test_pred=predict(fit,new_data = p_test,type="prob")
View(test_pred)
test_pred=predict(fit,new_data = p_test,type="prob") %>% select(.pred_1)
test_pred=predict(fit,new_data = p_test,type="prob") %>% select(1)
View(test_pred)
test_pred=predict(fit,new_data = p_test,type="prob")[,2]
test_pred=data.frame(test_pred)
View(test_pred)
train_pred=round(predict(fit,new_data = p_train,type="prob")[,2],1)
test_pred=round(predict(fit,new_data = p_test,type="prob")[,2],1)
x=data.frame(test_pred)
View(x)
rm(x)
ks.test(test_pred,"pnorm")
train_pred1=predict(fit,newdata = p_train,type= "response")
test_pred1=predict(fit,newdata = p_test,type= "response")
ks.test(as.numeric(test_pred1),"pnorm")
x=data.frame(test_pred1)
View(x)
class(x$test_pred1)
test_pred1=data.frame(test_pred1)
rm(x)
View(test_pred1)
test_pred1$test_pred1=as.numeric(test_pred1$test_pred1)
test_pred1=predict(fit,newdata = p_test,type= "response")
ks.test(as.numeric(test_pred1),"pnorm")
test_pred1=data.frame(test_pred1)
View(test_pred1)
test_pred1$test_pred1=ifelse(test_pred1$test_pred1=1,"Yes","No")
test_pred1$test_pred1=ifelse(test_pred1$test_pred1==1,"Yes","No")
ks.test(test_pred1,"pnorm")
test_pred1=predict(fit,newdata = p_test,type= "response")
test_pred1=as.numeric(test_pred1)
test_pred1=data.frame(test_pred1)
View(test_pred1)
test_pred1$test_pred1=ifelse(test_pred1$test_pred1==1,"No","Yes")
ks.test(test_pred1,"pnorm")
test_pred1=predict(fit,newdata = p_test,type= "response")
test_pred1=data.frame(test_pred1)
ks.test(test_pred1,"pnorm")
test_pred1=predict(fit,newdata = p_test,type= "response")
test_pred1=as.numeric(test_pred1)
test_pred1=data.frame(test_pred1)
ks.test(test_pred1,"pnorm")
test_pred1$test_pred1=ifelse(test_pred1$test_pred1==1,"No","Yes")
names(test_pred1)="went_on_backorder"
write.csv(test_pred1,"F:\\Vanshika\\DATA\\Rdata\\PROJECTS\\MANUFACTURING\\Vanshika_Parkar_P3_part2.csv",row.names=FALSE)
table(test_pred1)
train_pred1=predict(fit,newdata = p_train,type= "response")
library(randomForest)
library(dplyr)
library(car)
train_pred1=predict(fit,newdata = p_train,type= "response")
test_pred1=predict(fit,newdata = p_test,type= "response")
test_pred1=predict(fit,newdata = p_test,type= "response")
