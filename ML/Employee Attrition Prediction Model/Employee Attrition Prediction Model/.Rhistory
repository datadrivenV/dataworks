library(pROC)
library(ggplot2)
library(vip)
library(rpart.plot)
library(DALEXtra)
library(tidymodels)
library(visdat)
bank_train=read.csv("F:\\Vanshika\\DATA\\Rdata\\PROJECTS\\BANKING\\bank-full_train.csv",stringsAsFactors = FALSE)
View(bank_train)
hr_train=read.csv("F:\\Vanshika\\DATA\\Rdata\\PROJECTS\\HR\\hr_train.csv",stringsAsFactors = FALSE)
View(hr_train)
rm(hr_train)
bank_test=read.csv("F:\\Vanshika\\DATA\\Rdata\\PROJECTS\\BANKING\\bank-full_test.csv",stringsAsFactors = FALSE)
View(bank_train)
View(bank_test)
library(tidymodels)
library(visdat)
library(tidyr)
library(car)
library(pROC)
library(ggplot2)
library(vip)
library(rpart.plot)
library(DALEXtra)
rg_train=read.csv("F:\\Vanshika\\DATA\\Rdata\\Datasets\\Additional Datasets\\rg_train.csv",stringsAsFactors = FALSE)
rg_test=read.csv("F:\\Vanshika\\DATA\\Rdata\\Datasets\\Additional Datasets\\rg_test.csv",stringsAsFactors = FALSE)
age_band_func=function(x){
a1=as.numeric(substr(x,1,2))
a2=as.numeric(substr(x,4,5))
age=ifelse(substr(x,1,2)=="71",71,
ifelse(x=="Unknown",NA,0.5*(a1+a2)))
return(age)
}
children_func=function(x){
x=ifelse(x=="Zero",0,substr(x,1,1))
x=as.numeric(x)
return(x)
}
fi_func=function(x){
x=gsub("[<,>=]","",x)
temp=data.frame(fi=x)
temp=temp %>%
separate(fi,into=c("f1","f2")) %>%
mutate(f1=as.numeric(f1),
f2=as.numeric(f2),
fi=ifelse(is.na(f1),f2,
ifelse(is.na(f2),f1,0.5*(f1+f2)))) %>%
select(-f1,-f2)
return(temp$fi)
}
rg_train$Revenue.Grid=as.factor(as.numeric(rg_train$Revenue.Grid==1))
dp_pipe=recipe(Revenue.Grid~.,data=rg_train) %>%
update_role(REF_NO,post_code,post_area,new_role = "drop_vars") %>%
update_role(status,occupation,occupation_partner,home_status,
self_employed,self_employed_partner,TVarea,
gender,region,new_role="to_dummies") %>%
step_rm(has_role("drop_vars")) %>%
step_mutate_at(age_band,fn=age_band_func) %>%
step_mutate_at(family_income,fn=fi_func) %>%
step_mutate_at(children,fn=children_func) %>%
step_unknown(has_role("to_dummies"),new_level="__missing__") %>%
step_other(has_role("to_dummies"),threshold =0.02,other="__other__") %>%
step_dummy(has_role("to_dummies")) %>%
step_impute_median(all_numeric(),-all_outcomes())
dp_pipe=prep(dp_pipe)
train=bake(dp_pipe,new_data=NULL)
test=bake(dp_pipe,new_data=rg_test)
bank_train=read.csv("F:\\Vanshika\\DATA\\Rdata\\PROJECTS\\BANKING\\bank-full_train.csv",stringsAsFactors = FALSE)
bank_test=read.csv("F:\\Vanshika\\DATA\\Rdata\\PROJECTS\\BANKING\\bank-full_test.csv",stringsAsFactors = FALSE)
View(bank_train)
eg=as.numeric(bank_train$month)
d=for mon in bank_train$month{
d=match(bank_train$month, month.name)
d=match(bank_train$month, month.name[1:3])
d=match(bank_train$month, month.abb)
d=match(bank_train[["month"]], month.abb)
d=bank_train$month
d=match(bank_train[["month"]], month.abb)
d=bank_train$month
d=data.frame(bank_train$month)
View(d)
d["months"]=data.frame(bank_train$month)
d[["months"]]=match(bank_train[["month"]], month.abb)
d["months"]=data.frame(bank_train$month)
rm(eg)
d[["month"]]=match(bank_train[["month"]], month.abb)
d[["month"]]=match(bank_train[["months"]], month.abb)
df=data.frame(id=1:20, month=months)
df=data.frame(id=1:12, month=months)
rm(d)
month_func=function(x){
y=match(x, month.abb)
return(y)
}
month_func(bank_train$month)
rm(month_func)
month_func=function(x){
x=recode(x,
jan=1,
feb=2,
mar=3,
apr=4,
may=5,
jun=6,
jul=7,
aug=8,
sep=9,
oct=10,
nov=11,
dec=12)
return(x)
}
month_func(bank_train$month)
bank_train=read.csv("F:\\Vanshika\\DATA\\Rdata\\PROJECTS\\BANKING\\bank-full_train.csv",stringsAsFactors = FALSE)
bank_test=read.csv("F:\\Vanshika\\DATA\\Rdata\\PROJECTS\\BANKING\\bank-full_test.csv",stringsAsFactors = FALSE)
View(bank_train)
to_num_func=function(x){
x=as.numeric(X)
return(X)
}
month_func=function(x){
x=recode(x,
jan=1,
feb=2,
mar=3,
apr=4,
may=5,
jun=6,
jul=7,
aug=8,
sep=9,
oct=10,
nov=11,
dec=12)
return(x)
}
cont_func=function(x){
ifelse((x %in% c('telephone','cellular')),1,0)
}
y=cont_func(bank_train$contact)
rm(y)
bank_train$y=as.factor(as.numeric(bank_train$y=='yes'))
bank_train=read.csv("F:\\Vanshika\\DATA\\Rdata\\PROJECTS\\BANKING\\bank-full_train.csv",stringsAsFactors = FALSE)
bank_test=read.csv("F:\\Vanshika\\DATA\\Rdata\\PROJECTS\\BANKING\\bank-full_test.csv",stringsAsFactors = FALSE)
View(bank_train)
to_num_func=function(x){
x=as.numeric(X)
return(X)
}
month_func=function(x){
x=recode(x,
jan=1,
feb=2,
mar=3,
apr=4,
may=5,
jun=6,
jul=7,
aug=8,
sep=9,
oct=10,
nov=11,
dec=12)
return(x)
}
cont_func=function(x){
ifelse((x %in% c('telephone','cellular')),1,0)
}
bank_train$y=as.factor(as.numeric(bank_train$y=='yes'))
dp_pipe=recipe(y~.,data = bank_train) %>%
update_role(ID,new_role = "drop_var") %>%
update_role(job,marital,education,poutcome,new_role = "to_dummies") %>%
update_role(default,housing,loan,new_role = "bin_to_num") %>%
step_rm(has_role("drop_var")) %>%
step_mutate_at(has_role("bin_to_num"),fn=to_num_func) %>%
step_mutate_at(month,fn=month_func) %>%
step_mutate_at(contact,fn=cont_func) %>%
step_unknown(has_role("to_dummies"),new_level="__missing__") %>%
step_other(has_role("to_dummies"),threshold =0.02,other="__other__") %>%
step_dummy(has_role("to_dummies")) %>%
step_impute_median(all_numeric(),-all_outcomes())
dp_pipe=prep(dp_pipe)
rlang::last_error()
rlang::last_trace()
dp_pipe=recipe(y~.,data = bank_train) %>%
update_role(ID,new_role = "drop_var") %>%
update_role(job,marital,education,poutcome,new_role = "to_dummies") %>%
step_rm(has_role("drop_var")) %>%
step_mutate_at(default,housing,loan,fn=to_num_func) %>%
step_mutate_at(month,fn=month_func) %>%
step_mutate_at(contact,fn=cont_func) %>%
step_unknown(has_role("to_dummies"),new_level="__missing__") %>%
step_other(has_role("to_dummies"),threshold =0.02,other="__other__") %>%
step_dummy(has_role("to_dummies")) %>%
step_impute_median(all_numeric(),-all_outcomes())
dp_pipe=prep(dp_pipe)
dp_pipe=recipe(y~.,data = bank_train) %>%
update_role(ID,new_role = "drop_var") %>%
update_role(job,marital,education,poutcome,new_role = "to_dummies") %>%
step_rm(has_role("drop_var")) %>%
step_mutate_at(default,fn=to_num_func) %>%
step_mutate_at(housing,fn=to_num_func) %>%
step_mutate_at(loan,fn=to_num_func) %>%
step_mutate_at(month,fn=month_func) %>%
step_mutate_at(contact,fn=cont_func) %>%
step_unknown(has_role("to_dummies"),new_level="__missing__") %>%
step_other(has_role("to_dummies"),threshold =0.02,other="__other__") %>%
step_dummy(has_role("to_dummies")) %>%
step_impute_median(all_numeric(),-all_outcomes())
dp_pipe=prep(dp_pipe)
rlang::last_error()
rlang::last_trace()
cont_func=function(x){
x=ifelse((x %in% c('telephone','cellular')),1,0)
return(x)
}
dp_pipe=recipe(y~.,data = bank_train) %>%
update_role(ID,new_role = "drop_var") %>%
update_role(job,marital,education,poutcome,new_role = "to_dummies") %>%
step_rm(has_role("drop_var")) %>%
step_mutate_at(default,fn=to_num_func) %>%
step_mutate_at(housing,fn=to_num_func) %>%
step_mutate_at(loan,fn=to_num_func) %>%
step_mutate_at(month,fn=month_func) %>%
step_mutate_at(contact,fn=cont_func) %>%
step_unknown(has_role("to_dummies"),new_level="__missing__") %>%
step_other(has_role("to_dummies"),threshold =0.02,other="__other__") %>%
step_dummy(has_role("to_dummies")) %>%
step_impute_median(all_numeric(),-all_outcomes())
dp_pipe=prep(dp_pipe)
rlang::last_error()
d=cont_func(bank_train$contact)
rm(d)
d=to_num_func(bank_train$default)
to_num_func=function(x){
x=as.numeric(x)
return(x)
}
rm(d)
dp_pipe=recipe(y~.,data = bank_train) %>%
update_role(ID,new_role = "drop_var") %>%
update_role(job,marital,education,poutcome,new_role = "to_dummies") %>%
step_rm(has_role("drop_var")) %>%
step_mutate_at(default,fn=to_num_func) %>%
step_mutate_at(housing,fn=to_num_func) %>%
step_mutate_at(loan,fn=to_num_func) %>%
step_mutate_at(month,fn=month_func) %>%
step_mutate_at(contact,fn=cont_func) %>%
step_unknown(has_role("to_dummies"),new_level="__missing__") %>%
step_other(has_role("to_dummies"),threshold =0.02,other="__other__") %>%
step_dummy(has_role("to_dummies")) %>%
step_impute_median(all_numeric(),-all_outcomes())
dp_pipe=prep(dp_pipe)
train=bake(dp_pipe,new_data=NULL)
View(train)
test=bake(dp_pipe,new_data=rg_test)
test=bake(dp_pipe,new_data=bank_test)
View(bank_test)
table(is.na(bank_test$default))
table(is.na(bank_test$housing))
table(is.na(bank_test$loan))
View(test)
table(is.na(test$default))
rf_model = rand_forest(
mtry = tune(),
trees = tune(),
min_n = tune()
) %>%
set_mode("classification") %>%
set_engine("ranger")
folds = vfold_cv(train, v = 5)
floor(sqrt(ncol(x)))
floor(sqrt(ncol(train)))
ceiling(sqrt(ncol(train)))
rf_grid = grid_regular(mtry(c(5,25)), trees(c(100,500)),
min_n(c(10,20)),levels = 3)
my_res=tune_grid(
rf_model,
y~.,
resamples = folds,
grid = rf_grid,
metrics = metric_set(roc_auc),
control = control_grid(verbose = TRUE)
)
autoplot(my_res)+theme_light()
my_res %>% show_best()
final_rf_fit=rf_model %>%
set_engine("ranger",importance='permutation') %>%
finalize_model(select_best(my_res,"roc_auc")) %>%
fit(y~.,data=train)
final_rf_fit %>%
vip(geom = "col", aesthetics = list(fill = "midnightblue", alpha = 0.8)) +
scale_y_continuous(expand = c(0, 0))
train_pred=predict(final_rf_fit,new_data = train,type="prob") %>% select(.pred_1)
test_pred=predict(final_rf_fit,new_data = test,type="prob") %>% select(.pred_1)
View(test_pred)
train.score=train_pred$.pred_1
real=train$y
rocit = ROCit::rocit(score = train.score,
class = real)
kplot=ROCit::ksplot(rocit)
my_cutoff=kplot$`KS Cutoff`
test_hard_class=as.numeric(test_pred>my_cutoff)
test_preds=data.frame(test_hard_class)
View(test_preds)
names(test_preds)="y"
View(test_preds)
write.csv(test_preds,"F:\\Vanshika\\DATA\\Rdata\\PROJECTS\\BANKING\\Vanshika_Parkar_P5_part2.csv",row.names=FALSE)
ks.test(as.numeric(test.predictions),"pnorm")
ks.test(as.numeric(test_pred),"pnorm")
ks.test(test_pred,"pnorm")
View(bank_train)
bank_train=read.csv("F:\\Vanshika\\DATA\\Rdata\\PROJECTS\\BANKING\\bank-full_train.csv",stringsAsFactors = FALSE)
View(bank_train)
bank_train=read.csv("F:\\Vanshika\\DATA\\Rdata\\PROJECTS\\BANKING\\bank-full_train.csv",stringsAsFactors = FALSE)
bank_test=read.csv("F:\\Vanshika\\DATA\\Rdata\\PROJECTS\\BANKING\\bank-full_test.csv",stringsAsFactors = FALSE)
View(bank_train)
mean(bank_train$age)
round(mean(bank_train$age),2)
rm(bank_test)
summary(bank_train$balance)
tmin=72-1.5*1342
1.5*1342
1.5*1342 - 72
tmin=72-1.5*1342
IQR(bank_train$balance)
tmax=1414+1.5*1342
bank_train$balance[which(x < Tmin | x > Tmax)]
bank_train$balance[which(bank_train$balance < Tmin | bank_train$balance > Tmax)]
bank_train$balance[which(bank_train$balance < tmin | bank_train$balance > tmax)]
bank_train$balance[which(bank_train$balance < tmin | bank_train$balance > tmax)].sum()
sum(bank_train$balance[which(bank_train$balance < tmin | bank_train$balance > tmax)])
y=bank_train$balance
x=(y[which(y < tmin | y > tmax)]
x=y[which(y < tmin | y > tmax)]
x=y[which(y < tmin | y > tmax)]
x.sum()
sum(x)
bank_train=read.csv("F:\\Vanshika\\DATA\\Rdata\\PROJECTS\\BANKING\\bank-full_train.csv",stringsAsFactors = FALSE)
var(bank_train$balance)
library(car)
library(pROC)
library(ggplot2)
library(vip)
library(rpart.plot)
library(DALEXtra)
library(tidymodels)
library(visdat)
hr_train=read.csv("F:\\Vanshika\\DATA\\Rdata\\PROJECTS\\HR\\hr_train.csv",stringsAsFactors = FALSE)
hr_test=read.csv("F:\\Vanshika\\DATA\\Rdata\\PROJECTS\\HR\\hr_test.csv",stringsAsFactors = FALSE)
glimpse(hr_train)
hr_train$left=as.factor(hr_train$left==1)
hr_train$promotion_last_5years = as.factor(hr_train$promotion_last_5years)
hr_test$promotion_last_5years = as.factor(hr_test$promotion_last_5years)
hr_train$Work_accident = as.factor(hr_train$Work_accident)
hr_test$Work_accident = as.factor(hr_test$Work_accident)
dp_pipe=recipe(left~.,data = hr_train) %>%
update_role(sales, salary,new_role = "to_dummies") %>%
step_other(has_role("to_dummies"),threshold =0.02,other="__other__") %>%
step_dummy(has_role("to_dummies")) %>%
step_impute_median(all_numeric(),-all_outcomes())
dp_pipe=prep(dp_pipe)
train=bake(dp_pipe,new_data=NULL)
test=bake(dp_pipe,new_data=hr_test)
rf_model = rand_forest(
mtry = tune(),
trees = tune(),
min_n = tune()
) %>%
set_mode("classification") %>%
set_engine("ranger")
folds = vfold_cv(train, v = 5)
rf_grid = grid_regular(mtry(c(4,10)), trees(c(100,500)),
min_n(c(10,20)),levels = 3)
my_res=tune_grid(
rf_model,
left~.,
resamples = folds,
grid = rf_grid,
metrics = metric_set(roc_auc),
control = control_grid(verbose = TRUE)
)
autoplot(my_res)+theme_light()
fold_metrics=collect_metrics(my_res)
my_res %>% show_best()
final_rf_fit=rf_model %>%
set_engine("ranger",importance='permutation') %>%
finalize_model(select_best(my_res,"roc_auc")) %>%
fit(left~.,data=train)
final_rf_fit %>%
vip(geom = "col", aesthetics = list(fill = "midnightblue", alpha = 0.8)) +
scale_y_continuous(expand = c(0, 0))
train_pred=round(predict(final_rf_fit,new_data = train,type="prob") %>% select(.pred_1),2)
train_pred=predict(final_rf_fit,newdata= train, type="prob")[,1]
train_pred=predict(final_rf_fit,new_data= train, type="prob")[,1]
View(train_pred)
View(train_pred)
train_pred=round(predict(final_rf_fit,new_data= train, type="prob")[,1],2)
View(train_pred)
View(train_pred)
test_pred=round(predict(final_rf_fit,new_data= test, type="prob")[,1],2)
View(test_pred)
train_pred=round(predict(final_rf_fit,new_data= train, type="prob"),2)
View(train_pred)
View(hr_train)
train_pred=round(predict(final_rf_fit,new_data= train, type="prob")[,1],2)
test_pred=round(predict(final_rf_fit,new_data= test, type="prob")[,1],2)
View(test_pred)
names(test_pred)="left"
View(test_pred)
View(test_pred)
View(train_pred)
table(hr_train$salary,hr_train$left)
write.csv(test_preds,"F:\\Vanshika\\DATA\\Rdata\\PROJECTS\\HR\\Vanshika_Parkar_P4_part2.csv",row.names=FALSE)
write.csv(test_pred,"F:\\Vanshika\\DATA\\Rdata\\PROJECTS\\HR\\Vanshika_Parkar_P4_part2.csv",row.names=FALSE)
View(train)
glimpse(train)
hr_train=read.csv("F:\\Vanshika\\DATA\\Rdata\\PROJECTS\\HR\\hr_train.csv",stringsAsFactors = FALSE)
hr_test=read.csv("F:\\Vanshika\\DATA\\Rdata\\PROJECTS\\HR\\hr_test.csv",stringsAsFactors = FALSE)
hr_train$left=as.factor(hr_train$left==1)
View(hr_train)
dp_pipe=recipe(left~.,data = hr_train) %>%
update_role(Work_accident,promotion_last_5years,new_role = "drop_vars") %>%
update_role(sales, salary,new_role = "to_dummies") %>%
step_rm(has_role("drop_vars")) %>%
step_other(has_role("to_dummies"),threshold =0.02,other="__other__") %>%
step_dummy(has_role("to_dummies")) %>%
step_impute_median(all_numeric(),-all_outcomes())
dp_pipe=prep(dp_pipe)
train=bake(dp_pipe,new_data=NULL)
test=bake(dp_pipe,new_data=hr_test)
rf_model = rand_forest(
mtry = tune(),
trees = tune(),
min_n = tune()
) %>%
set_mode("classification") %>%
set_engine("ranger")
folds = vfold_cv(train, v = 5)
rf_grid = grid_regular(mtry(c(4,10)), trees(c(100,500)),
min_n(c(10,20)),levels = 3)
my_res=tune_grid(
rf_model,
left~.,
resamples = folds,
grid = rf_grid,
metrics = metric_set(roc_auc),
control = control_grid(verbose = TRUE)
)
autoplot(my_res)+theme_light()
fold_metrics=collect_metrics(my_res)
my_res %>% show_best()
library(car)
library(pROC)
library(ggplot2)
library(vip)
library(rpart.plot)
library(DALEXtra)
library(tidymodels)
library(visdat)
hr_train=read.csv("F:\\Vanshika\\DATA\\Rdata\\PROJECTS\\HR\\hr_train.csv",stringsAsFactors = FALSE)
hr_test=read.csv("F:\\Vanshika\\DATA\\Rdata\\PROJECTS\\HR\\hr_test.csv",stringsAsFactors = FALSE)
hr_train$left=as.factor(hr_train$left==1)
hr_train$promotion_last_5years = as.factor(hr_train$promotion_last_5years)
hr_test$promotion_last_5years = as.factor(hr_test$promotion_last_5years)
hr_train$Work_accident = as.factor(hr_train$Work_accident)
hr_test$Work_accident = as.factor(hr_test$Work_accident)
dp_pipe=recipe(left~.,data = hr_train) %>%
update_role(sales, salary,new_role = "to_dummies") %>%
step_other(has_role("to_dummies"),threshold =0.02,other="__other__") %>%
step_dummy(has_role("to_dummies")) %>%
step_impute_median(all_numeric(),-all_outcomes())
dp_pipe=prep(dp_pipe)
train=bake(dp_pipe,new_data=NULL)
test=bake(dp_pipe,new_data=hr_test)
rf_model = rand_forest(
mtry = tune(),
trees = tune(),
min_n = tune()
) %>%
set_mode("classification") %>%
set_engine("ranger")
folds = vfold_cv(train, v = 5)
rf_grid = grid_regular(mtry(c(4,10)), trees(c(100,500)),
min_n(c(10,20)),levels = 3)
my_res=tune_grid(
rf_model,
left~.,
resamples = folds,
grid = rf_grid,
metrics = metric_set(roc_auc),
control = control_grid(verbose = TRUE)
)
autoplot(my_res)+theme_light()
fold_metrics=collect_metrics(my_res)
my_res %>% show_best()
final_rf_fit=rf_model %>%
set_engine("ranger",importance='permutation') %>%
finalize_model(select_best(my_res,"roc_auc")) %>%
fit(left~.,data=train)
final_rf_fit %>%
vip(geom = "col", aesthetics = list(fill = "midnightblue", alpha = 0.8)) +
scale_y_continuous(expand = c(0, 0))
train_pred=round(predict(final_rf_fit,new_data = train,type="prob") %>% select(.pred_1),2)
train_pred=round(predict(final_rf_fit,new_data= train, type="prob"),2)
test_pred=round(predict(final_rf_fit,new_data= test, type="prob"),2)
View(test_pred)
train_pred=round(predict(final_rf_fit,new_data= train, type="prob")[,2],2)
test_pred=round(predict(final_rf_fit,new_data= test, type="prob")[,2],2)
names(test_pred)="left"
View(test_pred)
write.csv(test_pred,"F:\\Vanshika\\DATA\\Rdata\\PROJECTS\\HR\\Vanshika_Parkar_P4_part2.csv",row.names=FALSE)
